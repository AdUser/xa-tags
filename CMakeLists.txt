SET(CNAME "xa-tags")
SET(VERSION 0.3)
SET(EMAIL "ad_user@lavabit.com")

PROJECT(${CNAME} C)
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

# cmake modules
INCLUDE(CheckIncludeFile)
INCLUDE(CheckLibraryExists)
INCLUDE(CheckFunctionExists)
INCLUDE(GNUInstallDirs)
INCLUDE(CTest)

# user options
# see readme for full description
OPTION(BUILD_EMB_TOOL "Build light version of tool, suitable for use on embeddable systems." ON)
OPTION(BUILD_TOOL     "Build fully-functional version of standalone tool" ON)
OPTION(BUILD_DAEMON   "Build daemon" OFF)
OPTION(BUILD_CLIENT   "Build daemon's client" OFF)

OPTION(OPT_INLINE_TAGS "Save copy of tags directly in xattr" OFF)
OPTION(OPT_I18N   "Build without localization support" ON)
OPTION(OPT_ASYNC_DB "Allow collection and batch execution of write requests" ON)
OPTION(OPT_DB_AUTOCREATE "Create and initialize database automatically if missing" ON)
OPTION(OPT_UNIQ_TAGS_LIST "Create and maintain list of used tags" ON)
OPTION(OPT_REGEX_SEARCH "Regex search support" ON)
# also, this variables may be usefull:
# CMAKE_BUILD_TYPE        : Debug | Release
# CMAKE_INSTALL_PREFIX    : /usr  | /usr/local | ...

IF    (DEFINED CMAKE_BUILD_TYPE AND CMAKE_BUILD_TYPE STREQUAL "Release")
  SET (CMAKE_BUILD_TYPE "Release")
  SET (RELEASE TRUE)
  IF    (NOT CMAKE_C_FLAGS)
    SET (CMAKE_C_FLAGS "-O2 -Wall -pedantic -DNDEBUG")
  ENDIF (NOT CMAKE_C_FLAGS)
ELSE  (DEFINED CMAKE_BUILD_TYPE AND CMAKE_BUILD_TYPE STREQUAL "Release")
  SET (CMAKE_BUILD_TYPE "Debug")
  SET (CMAKE_C_FLAGS "-O0 -ggdb -Wall -pedantic -DDEBUG")
ENDIF (DEFINED CMAKE_BUILD_TYPE AND CMAKE_BUILD_TYPE STREQUAL "Release")

# set paths
IF    (NOT CMAKE_INSTALL_PREFIX)
  SET(CMAKE_INSTALL_PREFIX "/usr/local")
ENDIF (NOT CMAKE_INSTALL_PREFIX)

SET (INSTALL_BIN "${CMAKE_INSTALL_PREFIX}/bin")
SET (INSTALL_LIB "${CMAKE_INSTALL_PREFIX}/lib")

SET (BUILD_LIBS "")

IF (NOT LIBDIR)
  SET (LIBDIR "lib")
ENDIF (NOT LIBDIR)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

## options
IF    (OPT_ASYNC_DB STREQUAL "ON")
  ADD_DEFINITIONS( -DASYNC_DB_WRITE )
ENDIF (OPT_ASYNC_DB STREQUAL "ON")

IF    (OPT_INLINE_TAGS STREQUAL "ON")
  ADD_DEFINITIONS( -DINLINE_TAGS )
ENDIF (OPT_INLINE_TAGS STREQUAL "ON")

IF    (OPT_DB_AUTOCREATE STREQUAL "ON")
  ADD_DEFINITIONS( -DDB_AUTOCREATE )
ENDIF (OPT_DB_AUTOCREATE STREQUAL "ON")

IF    (OPT_UNIQ_TAGS_LIST STREQUAL "ON")
  ADD_DEFINITIONS( -DUNIQ_TAGS_LIST )
ENDIF (OPT_UNIQ_TAGS_LIST STREQUAL "ON")

IF    (OPT_REGEX_SEARCH STREQUAL "ON")
  ADD_DEFINITIONS( -DREGEX_SEARCH )
ENDIF (OPT_REGEX_SEARCH STREQUAL "ON")

## ask for dependencies
SET(NEED_SQLITE "NO")
IF    (BUILD_TOOL    STREQUAL "ON")
  SET(NEED_SQLITE "YES")
ENDIF (BUILD_TOOL    STREQUAL "ON")

IF    (BUILD_DAEMON  STREQUAL "ON")
  SET(NEED_SQLITE "YES")
ENDIF (BUILD_DAEMON  STREQUAL "ON")

IF    (BUILD_CLIENT  STREQUAL "ON")
  SET(NEED_SQLITE "YES")
ENDIF (BUILD_CLIENT  STREQUAL "ON")

# sqlite
IF    (NEED_SQLITE STREQUAL "NO")
  SET(SQLITE_STATUS "DISABLED")
ELSE  (NEED_SQLITE STREQUAL "NO")
  FIND_PACKAGE(Sqlite3 REQUIRED)

  IF    (SQLITE3_FOUND)
    SET (SQLITE_STATUS "FOUND")
    ADD_DEFINITIONS( -DHAVE_SQLITE3 )
  ELSE  (SQLITE3_FOUND)
    SET (SQLITE_STATUS "NOT FOUND")
    MESSAGE(SEND_ERROR "Sqlite not found.")
  ENDIF (SQLITE3_FOUND)
ENDIF (NEED_SQLITE STREQUAL "NO")

# gettext
IF    (OPT_I18N STREQUAL "OFF")
  SET (GETTEXT_STATUS "DISABLED")
ELSE  (OPT_I18N STREQUAL "OFF")
  FIND_PACKAGE(Gettext)
  FIND_PROGRAM(XGETTEXT_EXEC "xgettext")

  IF    (GETTEXT_FOUND)
    ADD_DEFINITIONS( -DHAVE_GETTEXT )
    ADD_DEFINITIONS( -DLOCALEDIR="${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LOCALEDIR}" )
    SET (GETTEXT_STATUS "FOUND")
  ELSE  (GETTEXT_FOUND)
    MESSAGE(SEND_ERROR "Gettext not found.")
    SET (GETTEXT_STATUS "NOT FOUND")
  ENDIF (GETTEXT_FOUND)
ENDIF (OPT_I18N STREQUAL "OFF")

MESSAGE (STATUS "---------------------------------------------")
MESSAGE (STATUS "Build type is:            ${CMAKE_BUILD_TYPE}")
MESSAGE (STATUS "CFLAGS is:                ${CMAKE_C_FLAGS}")
MESSAGE (STATUS "")
MESSAGE (STATUS "Install prefix:           ${CMAKE_INSTALL_PREFIX}")
MESSAGE (STATUS "Locales prefix:           ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LOCALEDIR}")
MESSAGE (STATUS "Binaries directory:       ${INSTALL_BIN}")
MESSAGE (STATUS "")
MESSAGE (STATUS "Binaries:")
MESSAGE (STATUS "  Tool (embedded use):    ${BUILD_EMB_TOOL}")
MESSAGE (STATUS "  Tool (common use):      ${BUILD_TOOL}")
MESSAGE (STATUS "  Client:                 ${BUILD_CLIENT}")
MESSAGE (STATUS "  Daemon:                 ${BUILD_DAEMON}")
MESSAGE (STATUS "")
MESSAGE (STATUS "Dependencies:")
MESSAGE (STATUS "  sqlite3:                ${SQLITE_STATUS}")
MESSAGE (STATUS "  gettext:                ${GETTEXT_STATUS}")
MESSAGE (STATUS "")
MESSAGE (STATUS "Options:")
MESSAGE (STATUS "  Async db write:         ${OPT_ASYNC_DB}")
MESSAGE (STATUS "  i18n support:           ${OPT_I18N}")
MESSAGE (STATUS "  Inline tags:            ${OPT_INLINE_TAGS}")
MESSAGE (STATUS "  Autocreate db:          ${OPT_DB_AUTOCREATE}")
MESSAGE (STATUS "  List of used tags:      ${OPT_UNIQ_TAGS_LIST}")
MESSAGE (STATUS "  Regex search support:   ${OPT_REGEX_SEARCH}")
MESSAGE (STATUS "------------------------------------------")

ADD_SUBDIRECTORY (src)

IF    (GETTEXT_STATUS STREQUAL "FOUND")
  ADD_SUBDIRECTORY (po)
ENDIF (GETTEXT_STATUS STREQUAL "FOUND")

IF    (CMAKE_BUILD_TYPE STREQUAL "Debug")
  ADD_SUBDIRECTORY (tests)
ENDIF (CMAKE_BUILD_TYPE STREQUAL "Debug")
